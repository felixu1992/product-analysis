import openai


class Client:
    def __init__(self):
        self.client = openai.OpenAI(
            api_key='sk-af0b3ac1c57842529548347645ca81b5',
            base_url=(
                'https://api.deepseek.com'
            )
        )


    def statistics(self, content):
        completion = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {
                    "role": "system",
                    "content":
                    """
                    {
                      "角色定位": {
                        "身份": "跨领域数据分析引擎",
                        "核心能力": [
                          "多层级URL语义解析",
                          "全领域功能聚类",
                          "智能异常熔断"
                        ],
                        "知识体系": {
                          "财务产品": ["总账管理", "应收应付", "费用报销", "预算编制", "税务管理"],
                          "云计算": ["虚拟机实例", "容器服务", "对象存储", "负载均衡", "CDN配置"],
                          "企业管理": ["OA审批流", "CRM客户池", "ERP物料管理", "HRM绩效考核"],
                          "通用架构": ["权限管理", "审计日志", "数据看板", "系统设置"]
                        }
                      },
                    
                      "数据处理协议": {
                        "page_id解析": {
                          "预处理流程": [
                            {
                              "步骤": "域名剥离",
                              "规则": "正则表达式：/^(?:https?:\/\/)?[^\/]+/i → 空值",
                              "示例": {
                                "输入": "https://finance.example.com/invoice/list",
                                "输出": "/invoice/list"
                              }
                            },
                            {
                              "步骤": "路径清洗",
                              "操作": [
                                "替换数字ID：/\/\d+/g → 空",
                                "标准化版本：/v\d+/ → _version",
                                "过滤通用词：/(index|home)$/ → 空"
                              ],
                              "示例": {
                                "输入": "/api/v2/user/12345",
                                "输出": "/api_version/user"
                              }
                            }
                          ],
                          
                          "语义提取": {
                            "关键路径策略": [
                              "当层级≤3时：用下划线连接各段（如/cloud/vm/create → cloud_vm_create）",
                              "当层级＞3时：取首尾各两段（如/a/b/c/d/e → a_b_d_e）",
                              "保留动作语义词：如create、edit、export等"
                            ],
                            "示例": {
                              "财务场景": {
                                "输入": "/finance/budget/approval",
                                "输出": "finance_budget_approval"
                              },
                              "云产品场景": {
                                "输入": "/cloud/storage/bucket/list",
                                "输出": "cloud_storage_bucket_list"
                              }
                            }
                          },
                    
                          "翻译决策树": [
                            {
                              "条件": "原标题完整包含路径语义词",
                              "操作": "强制采用原标题",
                              "示例": {
                                "路径语义": "invoice_manage",
                                "原标题": "全渠道发票管理",
                                "决策": "包含关系成立 → 采用原标题"
                              }
                            },
                            {
                              "条件": "Jaccard相似度＜40%",
                              "操作": "采用译名",
                              "附加规则": [
                                "专业术语保护：如ERP、SaaS等缩写不翻译",
                                "混合命名：译名+原标题限定词（例：分析_看板）"
                              ]
                            },
                            {
                              "默认操作": "保留原标题"
                            }
                          ]
                        },
                    
                        "功能聚类规则": {
                          "聚合条件": [
                            "同产品下功能标题满足以下任一模式：",
                            "1. 相同核心词+操作后缀（例：'订单创建'与'订单审核'→'订单管理'）",
                            "2. 业务流程上下游关系（例：'费用申请'与'报销审批'→'报销流程'）"
                          ],
                          "禁止聚合场景": [
                            "跨业务域（如'客户管理'与'服务器管理'）",
                            "操作类型冲突（如'数据导出'与'数据导入'）"
                          ]
                        }
                      },
                    
                      "分析任务流": {
                        "核心功能矩阵": {
                          "执行步骤": [
                            "按product_name分组 → 组内mpv降序 → 取前20 → 字母序二次排序"
                          ],
                          "容错机制": "访问量相同功能按拼音首字母排序"
                        },
                        "低活功能检测": {
                          "执行步骤": [
                            "按product_name分组 → 组内mpv升序 → 取前5 → 字母序二次排序"
                          ]
                        },
                        "跨产品映射": {
                          "精确匹配规则": [
                            "大小写敏感",
                            "标点符号一致性（中英文符号不混用）",
                            "排除长度差异＞3字符的相似名称"
                          ]
                        }
                      },
                    
                      "输出规范": {
                        "数据结构": {
                          "主要功能": {
                            "产品A": ["功能1（MPV: X）", ..., "功能20（MPV: Y）"],
                            "产品B": ["功能1（MPV: X）", ...]
                          },
                          "低活功能": {
                            "产品A": ["功能1（MPV: X）", ..., "功能5（MPV: Y）"]
                          },
                          "跨产品功能": {
                            "通用功能1": ["产品A", "产品B"],
                            "通用功能2": ["产品C", "产品D"]
                          }
                        },
                        "质量铁律": [
                          "MPV数值必须原文照录",
                          "禁用任何推测性结论",
                          "空值字段用null表示"
                        ]
                      }
                    }
                    """
                    # """
                    # 你将收到一组格式化的数据，数据格式为一个对象数组，每个对象代表一条数据。每条数据包含以下字段：
                    # page_id: 表示某个页面的功能含义。它的值是一个产品 Web 页面的 URL，以及小括号内的页面标题。你需要根据这个值理解页面的功能：
                    #   如果 URL 包含 /，则只理解最后一个 / 后的英文单词。
                    #   如果没有 /，则理解整个 URL。
                    #   判断这个单词是否是一个语义化的英文单词。如果是，且其翻译成中文后的含义与小括号内的标题含义差异很大，则取翻译后的功能；否则，直接取小括号内的内容作为功能描述。
                    # mpv: 代表该页面本月用户访问量。值越大，页面越热门。
                    # product_name: 代表该页面所属的产品。相同 product_name 的数据属于一个聚类。
                    # 产品功能是一类页面提供的功能聚合。例如，“商品详情页”、“商品编辑页”、“商品列表页”等，都属于“商品管理”功能。如果无法通过页面功能很好地聚类，则不要轻易聚类功能，直接将每个页面功能理解为一个独立的产品功能。
                    # 角色限定：
                    # 此任务由产品分析师或数据科学家执行最为专业，因为他们具备对产品功能、用户行为数据以及数据分析方法的深入理解，能够准确提炼出产品功能的价值和用户使用趋势。
                    # 任务：
                    # 主要功能分析：
                    #   对于每个产品，总结出 TOP 20 用户访问的功能(即 mpv 值最高的 20 个功能)，如果当前产品具有的功能页不足 20 个，则全部返回。
                    # 低活功能分析：
                    #   对于每个产品，总结出用户访问较少的 5 个功能（即 mpv 值最低的 5 个功能），如果当前产品具有的功能页不足 5 个，则全部返回。
                    # 跨产品功能分析：
                    #   分析是否存在一些功能被 2 个或更多产品的用户使用。如果有，请以功能为维度进行聚合，展示该功能有哪些产品在提供。如果不存在多个产品，则不需要进行跨产品分析。
                    # 输出格式:
                    #     {
                    #       "主要功能": {
                    #         "产品名称1": ["功能1", "功能2", "功能3", ...],
                    #         "产品名称2": ["功能1", "功能2", "功能3", ...],
                    #         ...
                    #       },
                    #       "低活功能": {
                    #         "产品名称1": ["功能1", "功能2", "功能3", ...],
                    #         "产品名称2": ["功能1", "功能2", "功能3", ...],
                    #         ...
                    #       },
                    #       "跨产品功能": {
                    #         "功能1": ["产品名称1", "产品名称2", ...],
                    #         "功能2": ["产品名称1", "产品名称3", ...],
                    #         ...
                    #       }
                    #     }
                    # """
                    # "content":
                    #     """
                    #     用户将提供给你一段格式化的数据，而你作为一个经验丰富的产品经理，能够在用户提供的数据中，找到热门功能和冷门功能，同时能够从产品线、产品、功能等对产品功能做出一些总结，
                    #     帮助用户进行产品分析和优化。
                    #     在用户提交的数据中 pageTitle 表示功能菜单，MPV 表示每个月的浏览量，请你分析数据内容，并提取其中的信息，以 JSON 的形式输出，输出的 JSON 需遵守以下的格式：
                    #     \n\n{\n
                    #         \"top10\": [
                    #                     {
                    #                     \"title\": "",
                    #                     \"MPV\": ,
                    #                     \"function\": \"\"
                    #                     }
                    #                    ],
                    #         \"top-10\": [
                    #                      {
                    #                      \"title\": \"\",
                    #                      \"MPV\": ,
                    #                      \"function\": \"\"
                    #                      }
                    #                     ]
                    #       \n}
                    #     在以上结构中，title 为原 pageTitle 的值， MPV 为对应的 MPV 的值， function 为你根据产品和功能，预计的可能的功能
                    #     """
                },
                {
                    "role": "user",
                    "content": content
                }
            ]
        )
        return completion.choices[0].message.content


    def analysis(self, content):
        completion = self.client.chat.completions.create(
            model="deepseek-reasoner",
            messages=[
                {
                    "role": "system",
                    "content": "用户将提供给你一段格式化的数据，而你作为一个经验丰富的产品经理，对用户提供的数据进行多角度分析，提供产品分析结果和优化建议"
                               "top10 表示对应产品 MPV(月访问量) 前十的功能，top-10 表示 MPV(月访问量) 最少的十个功能，你需要在用户提供的数据进行横向和纵向对比，首先是同一个内"
                               "是否存在重复建设的功能，其次是在多个产品之间，是否存在可能的重复建设，如果只有一个产品，仅进行产品内的横向分析，最终，你需要给出你分析的结果和优化的建议，"
                               "无需给出思考过程，但是请分析和建议尽可能专业"
                },
                {
                    "role": "user",
                    "content": content
                }
            ]
        )
        return completion.choices[0].message.content